1.类和对象:
  例：其中的方法中，self必传
  class Car():
      """一次模拟汽车的简单尝试"""
      def __init__(self, make, model, year):
          """初始化描述汽车的属性"""
          self.make = make
          self.model = model
          self.year = year
      def get_descriptive_name(self):
          """返回整洁的描述性信息"""
          long_name = str(self.year) + ' ' + self.make + ' ' + self.model
          return long_name.title()
  my_new_car = Car('audi', 'a4', 2016)      #实例化
  print(my_new_car.get_descriptive_name())  #调用方法

  => 2016 Audi A4

2.正则表达式:是一种用来匹配字符串的强有力的武器
  基础：
      \d 可以匹配一个数字
      \w 可以匹配一个字母或数字
      \s 可以匹配1个空格空格
      .  可以匹配任意字符
      *  表示任意个字符（包括 0 个）
      +  表示至少一个字符
      ?  表示 0 个或 1 个字符
      {n}表示 n 个字符
      {n,m}表示 n-m 个字符
  
      例子：\d{3}\s+\d{3,8}  =>  \d{3}表示匹配 3 个数字
                                 \s 可以匹配一个空格（也包括 Tab 等空白符），所以\s+表示至少有一个空格
                                 \d{3,8}表示 3-8 个数字

  进阶：
      1).可用[]表示范围
       例子：[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线
             [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串
             [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串
      2).A|B 可以匹配 A 或 B
       例子：[P|p]ython 可以匹配'Python'或者'python'
      3).^表示行的开头， ^\d 表示必须以数字开头
      4).$表示行的结束， \d$表示必须以数字结束

  切分字符串
      例子：re.split(r'\s+', 'a b c')            =>['a', 'b', 'c']
            re.split(r'[\s\,]+', 'a,b, c d')     => ['a', 'b', 'c', 'd']
            re.split(r'[\s\,\;]+', 'a,b;; c d')  => ['a', 'b', 'c', 'd']

  分组:如果正则表达式中定义了组，就可以用group提取出来
      例子：m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
            
            m.group(0)       =>   '010-12345'
            m.group(1)       =>   '010'
            m.group(2)       =>   '12345'
      
3.  re模块：用要用r开头
      常见的判断方法:test = '用户输入的字符串'
                     if re.match(r'正则表达式', test):
                         print('ok')
                     else:
                         print('failed')
4.datetime模块学习：是 Python 处理日期和时间的标准库
  导入：from datetime import datetime

        datetime.now()                     #返回当前日期和时间，其类型是 datetime
        dt = datetime(2015, 4, 19, 12, 20) # 用指定日期时间创建 datetime 获取指定日期和时间
        #datetime 转换为 timestamp
        dt.timestamp()                     # 把 timestamp 转换为 datetime
        #timestamp 转换为 datetime  
        t = 1429417200.0
        print(datetime.fromtimestamp(t))   # 本地时间    => 2015-04-19 12:20:00
        print(datetime.utcfromtimestamp(t)) # UTC 时间   => 2015-04-19 04:20:00
        #str 转换为 datetime
        cday = datetime.strptime('2015-6-1 18:19:59', '%Y-%m-%d %H:%M:%S') => 2015-06-01 18:19:59
        #datetime 转换为 str
        print(now.strftime('%a, %b %d %H:%M'))  =>  Mon, May 05 16:28

        #datetime 加减
        from datetime import datetime, timedelta
        datetime.now() + timedelta(hours=10)  =>  
        #本地时间转换为 UTC 时间
        #时区转换 	 utcnow()拿到当前的 UTC 时间 再转换为任意时区的时间：
        utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)  #拿到 UTC 时间，并强制设置时区为 UTC+0:00:
        
	
5.http请求
  步骤 1：浏览器首先向服务器发送 HTTP 请求
          方法： GET 还是 POST， GET 仅请求资源， POST 会附带用户数据
          路径： /full/url/path；
          域名：由 Host 头指定： Host: www.sina.com.cn
          其他：相关的 Header；如果是 POST，那么请求还包括一个 Body
  步骤 2：服务器向浏览器返回 HTTP 响应，响应包括
          响应代码： 200 表示成功， 
                     3xx 表示重定向， 
                     4xx 表示客户端发送的请求有错误， 
                     5xx 表示服务器端处理时发生了错误；
          响应类型：由 Content-Type 指定；
  步骤 3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出 HTTP 请求，重复步骤 1、 2 
